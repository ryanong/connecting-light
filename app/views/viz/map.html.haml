#hadrians-mapbox
  %ul#points

  %ul#balloons


:javascript
  function HadriansWall() {
    var hadriansWall = this;
    this.lastMessageId = 0;
    this.map = $("#hadrians-mapbox");
    this.mapBox = #{@map_box.to_json};

    this.longLength = this.mapBox.west - this.mapBox.east;
    this.latLength = this.mapBox.north - this.mapBox.south;
    this.latLongToXY = function(lat,lng) {
      return [(hadriansWall.mapBox.west - lng)/hadriansWall.longLength * hadriansWall.map.width(), (hadriansWall.mapBox.north - lat) / this.latLength * this.map.height()];
    };

    this.balloons = #{HadriansWall::BALLOONS.map(&:reverse).to_json};

    this.points = #{HadriansWall::POINTS.map(&:reverse).to_json};

    this.flashRandomPoint = function() {
      hadriansWall.flashPoint(hadriansWall.randomPoint());
    };

    this.distance = function(start, finish){
      return Math.sqrt(Math.pow(finish[0]-start[0],2) + Math.pow(finish[1] - start[1],2));
    };

    this.point_on_line = function(start, finish, distance) {
      var vector = [];
      vector[0] = finish[0] - start[0];
      vector[1] = finish[1] - start[1];

      var magnitude = Math.sqrt(Math.pow(vector[0],2) + Math.pow(vector[1],2));
      vector[0] /= magnitude;
      vector[1] /= magnitude;

      var point = [
        start[0] + vector[0] * (magnitude + distance),
        start[1] + vector[1] * (magnitude + distance)
      ];

      return [point, distance - magnitude];
    };

    this.next_point_from = memoize(function(point, wall_point_index, distance) {
      var next_wall_point = hadriansWall.points[wall_point_index];
      var tmp = hadriansWall.point_on_line(point, next_wall_point, distance);
      var next_point = tmp[0];
      var distance_left = tmp[1];
      if(distance_left > 0) {
        if(hadriansWall.points[wall_point_index + 1]) {
          return hadriansWall.next_point_from(next_wall_point, wall_point_index + 1, distance_left);
        } else {
          return [next_wall_point, false];
        }
      }
      return [next_point, wall_point_index];
    });

    this.continue_wave = function(point, wall_point){
      hadriansWall.flashPoint(point);
      var tmp = hadriansWall.next_point_from(point, wall_point, 0.02);
      if(tmp[1]) {
        setTimeout(function(){ hadriansWall.continue_wave(tmp[0], tmp[1]); },1000);
      } else {
        setTimeout(function(){ hadriansWall.flashPoint(tmp[0]); },1000);
      }
    };

    var points_container = $("ul#points");
    this.flashPoint = function(point, color) {
      var coord = hadriansWall.latLongToXY(point[0], point[1]);
      var $point = $("<li class='point'></li>");
      $point.css('left', coord[0] - 4);
      $point.css('top', coord[1] - 4);
      if(color) {
        $point.css('background', color);
      }
      points_container.append($point);
      $point.fadeIn(1000, function(){
        this.fadeOut(1000,function(){
          this[0].parentNode.removeChild(this[0]);
        });
      });
    };

    this.randomPoint = function() {
      return hadriansWall.points[Math.floor(Math.random() * hadriansWall.points.length)];
    };

    this.flashMessage = function(message,latitude, longitude, color) {
      coord = hadriansWall.latLongToXY(latitude, longitude);
      $message = $("<div class='message'></div>");
      $message.css('left', coord[0]);
      $message.css('top', coord[1]);
      if(color) {
        $message.css('color', color);
      }
      $message.text("Â· " + message);
      hadriansWall.map.append($message);
      $message.fadeIn(1000, function(){
        this.fadeOut(1000,function(){
          this[0].parentNode.removeChild(this[0]);
        });
      });
    };

    this.poll = function() {
      $.get("/messages/hadrians_mapbox.json", function(data){
        $(data.messages).each(function () {
          if(this.id > hadriansWall.lastMessageId){
            var color = "rgb("+this.rgb.join(',')+")";
            if(this.closest_wall_point == null ){
              var distance = #{HadriansWall::LENGTH} * this.location_on_wall;
              this.closest_wall_point = hadriansWall.next_point_from(hadriansWall.points[0], 0, distance)[0];
            }
            hadriansWall.flashPoint([this.closest_wall_point[1],this.closest_wall_point[0]], color);

            if (this.latitude <= hadriansWall.mapBox.north &&
              this.latitude >= hadriansWall.mapBox.south &&
              this.longitude >= hadriansWall.mapBox.west &&
              this.longitude <= hadriansWall.mapBox.east) {
              hadriansWall.flashMessage(this.message, this.latitude, this.longitude, color);
            }
            hadriansWall.lastMessageId = this.id;
          }
        });
        setTimeout(hadriansWall.poll, 500);
      });
    };
    hadriansWall.continue_wave(hadriansWall.points[0],1);
    setInterval(function(){hadriansWall.continue_wave(hadriansWall.points[0],1);},14750);
    this.poll();
  }
  var hadriansWall = new HadriansWall();
